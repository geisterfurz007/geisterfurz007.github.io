{"version":3,"sources":["entities/Line.ts","stores/CurrentLinesStore.ts","stores/CommandHistoryStore.ts","stores/index.ts","commands/clear.ts","commands/about.ts","commands/index.ts","commands/email.ts","commands/help.ts","commands/github.ts","commands/stackOverflow.ts","components/PromptInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Line","content","hasPrompt","acceptsInput","this","CurrentLinesStore","action","bound","line","lines","push","input","length","addLine","out","observable","CommandHistoryStore","command","history","currentIndex","_CurrentLinesStore","_CommmandHistoryStore","Clear","clear","description","name","About","map","forEach","config","about","listing","Object","values","commands","c","PromptInput","props","keyHandler","bind","handleCommand","console","log","ref","autoFocus","className","onKeyDown","ev","key","target","value","updatePrompt","preventDefault","markOutputDone","addEntry","autoComplete","keys","CommandConfig","filter","cmd","startsWith","undefined","goBackAndGetPrevious","goForwardAndGetNext","splits","split","actualCommand","shift","restArgs","join","func","focus","React","Component","configure","enforceActions","LineWithPrompt","inputRef","window","location","toString","App","observer","lineToHtml","index","LineWithoutPrompt","consoleClick","onClick","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.29eb0dc3.chunk.js","sourcesContent":["export default class Line {\r\n  content: string;\r\n  hasPrompt: boolean;\r\n  acceptsInput: boolean;\r\n\r\n  static out(content: string): Line {\r\n    return new Line(content, false, false);\r\n  }\r\n\r\n  constructor(content: string, hasPrompt: boolean, acceptsInput: boolean) {\r\n    this.content = content;\r\n    this.hasPrompt = hasPrompt;\r\n    this.acceptsInput = acceptsInput;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.content;\r\n  }\r\n}","import { action, observable } from \"mobx\";\r\nimport Line from \"../entities/Line\";\r\n\r\nexport default class CurrentLinesStore {\r\n  @observable lines: Array<Line> = [\r\n    new Line(\"Welcome to geisterfurz007.github.io!\", false, false),\r\n    new Line(\"Feel free to have a look around, there isn't a lot here yet but you might find a thing or two.\", false, false),\r\n    new Line(\"\", true, true),\r\n  ];\r\n\r\n  @action.bound\r\n  addLine(line: Line): void {\r\n    this.lines.push(line);\r\n  }\r\n\r\n  @action.bound\r\n  updatePrompt(input: string): void {\r\n    this.lines[this.lines.length - 1] = new Line(input, true, false);\r\n  }\r\n\r\n  @action.bound\r\n  markOutputDone(): void {\r\n    this.addLine(Line.out(\"\"));\r\n    this.addLine(new Line(\"\", true, true));\r\n  }\r\n\r\n  @action.bound\r\n  clear(): void {\r\n    this.lines.length = 0;\r\n  }\r\n\r\n}\r\n\r\n","import { observable, action } from \"mobx\";\r\n\r\n\r\nexport default class CommandHistoryStore {\r\n\r\n  @observable\r\n  history: Array<string> = [];\r\n\r\n  @observable\r\n  currentIndex = 0;\r\n\r\n  @action.bound\r\n  addEntry(command: string): void {\r\n    this.history.push(command);\r\n  }\r\n\r\n  @action.bound\r\n  goBackAndGetPrevious(): string {\r\n    if (this.history.length === 0) return \"\";\r\n\r\n    this.currentIndex = this.currentIndex < 1 ? 0 : this.currentIndex - 1;\r\n    return this.history[this.currentIndex];\r\n  }\r\n\r\n  @action.bound\r\n  goForwardAndGetNext(): string {\r\n    if (this.history.length === 0) return \"\";\r\n\r\n    this.currentIndex = (this.currentIndex + 1) % this.history.length;\r\n    return this.history[this.currentIndex];\r\n  }\r\n\r\n}\r\n","import _CurrentLinesStore from \"./CurrentLinesStore\";\r\nimport _CommmandHistoryStore from \"./CommandHistoryStore\";\r\n\r\nexport const CurrentLinesStore = new _CurrentLinesStore();\r\nexport const CommandHistoryStore = new _CommmandHistoryStore();\r\n","import { CurrentLinesStore } from \"../stores\";\r\nimport Command from \"./Command\";\r\n\r\nconst Clear: Command = {\r\n  action: () => {\r\n    CurrentLinesStore.clear();\r\n  },\r\n  description: \"Clears the console\",\r\n  name: \"clear\"\r\n};\r\n\r\nexport default Clear;\r\n","import { CurrentLinesStore } from \"../stores\";\r\nimport Line from \"../entities/Line\";\r\nimport Command from \"./Command\";\r\n\r\nconst About: Command = {\r\n  action: () => {\r\n    [\"This is my personal github page! Because I am not really good at designing things, a friend of mine suggested to put together a commandline\",\r\n      \"and the result is exactly what you are seeing here! This website is still a work in progress and there will be more commands in the future.\",\r\n      \"Thanks for passing by and playing around with this!\"].map(Line.out).forEach(CurrentLinesStore.addLine);\r\n  }, description: \"Shows information about this page\", name: \"about\"\r\n};\r\n\r\nexport default About;\r\n","import clear from \"./clear\";\r\nimport about from \"./about\";\r\nimport help from \"./help\";\r\nimport email from \"./email\";\r\nimport github from \"./github\";\r\nimport stackoverflow from \"./stackOverflow\";\r\nimport Command from \"./Command\";\r\n\r\ninterface CommandConfigInterface {\r\n  [key: string]: Command;\r\n}\r\n\r\nconst config: CommandConfigInterface = {\r\n  \"about\": about,\r\n  // 'cls': clear,\r\n  \"clear\": clear,\r\n  \"email\": email,\r\n  \"help\": help,\r\n  \"github\": github,\r\n  \"stackoverflow\": stackoverflow\r\n};\r\n\r\nexport default config;\r\n","import { CurrentLinesStore } from \"../stores\";\r\nimport Line from \"../entities/Line\";\r\nimport Command from \"./Command\";\r\n\r\nconst Email: Command = {\r\n  action: () => {\r\n    [\"The first part of this domain at google's mail server\",\r\n      \"(if you are not a bot, you should be able to piece that one together)\"].map(Line.out).forEach(CurrentLinesStore.addLine);\r\n  },\r\n  description: \"Shows my mail address (please don't spam...)\",\r\n  name: \"email\",\r\n};\r\n\r\nexport default Email;\r\n","import { CurrentLinesStore } from \"../stores\";\r\nimport Line from \"../entities/Line\";\r\nimport Command from \"./Command\";\r\n\r\nimport commands from \"./index\";\r\n\r\nconst Help: Command = {\r\n  action: () => {\r\n    const listing = Object.values(commands).map(c => `${c.name}: ${c.description}`);\r\n    [\"Available commands:\", ...listing]\r\n      .map(Line.out).forEach(CurrentLinesStore.addLine);\r\n  },\r\n  description: \"Shows this help\",\r\n  name: \"help\"\r\n};\r\n\r\nexport default Help;\r\n","import { CurrentLinesStore } from \"../stores\";\r\nimport Line from \"../entities/Line\";\r\nimport Command from \"./Command\";\r\n\r\nconst Github: Command = {\r\n  action: () => {\r\n    CurrentLinesStore.addLine(Line.out(\"https://github.com/geisterfurz007\"));\r\n  },\r\n  description: \"Shows a link to my github profile\",\r\n  name: \"github\"\r\n};\r\n\r\nexport default Github;\r\n","import { CurrentLinesStore } from \"../stores\";\r\nimport Line from \"../entities/Line\";\r\nimport Command from \"./Command\";\r\n\r\nconst StackOverflow: Command = {\r\n  action: () => {\r\n    CurrentLinesStore.addLine(Line.out(\"https://stackoverflow.com/users/6707985\"));\r\n  },\r\n  description: \"Shows a link to my Stack Overflow profile\",\r\n  name: \"stackoverflow\"\r\n};\r\n\r\nexport default StackOverflow;\r\n","import React, { ReactElement } from \"react\";\r\nimport { CommandHistoryStore, CurrentLinesStore } from \"../stores\";\r\nimport CommandConfig from \"../commands\";\r\nimport Line from \"../entities/Line\";\r\n\r\nexport default class PromptInput extends React.Component<{}, {}> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.keyHandler = this.keyHandler.bind(this);\r\n    this.handleCommand = this.handleCommand.bind(this);\r\n  }\r\n\r\n  input: HTMLInputElement | null | undefined;\r\n\r\n  render(): ReactElement {\r\n    console.log(\"Rendering PromptInput\");\r\n\r\n    return (\r\n      <input\r\n        ref={(ref: HTMLInputElement): void => {\r\n          this.input = ref;\r\n        }}\r\n        autoFocus={true}\r\n        className={\"prompt\"}\r\n        onKeyDown={this.keyHandler}\r\n      />\r\n    );\r\n  }\r\n\r\n  keyHandler(ev: React.KeyboardEvent<HTMLInputElement>): void {\r\n    if (ev.key === \"Enter\") {\r\n      const content = (ev.target as HTMLInputElement).value;\r\n      CurrentLinesStore.updatePrompt(content);\r\n      ev.preventDefault();\r\n\r\n      this.handleCommand(content);\r\n\r\n      CurrentLinesStore.markOutputDone();\r\n      CommandHistoryStore.addEntry(content);\r\n      (ev.target as HTMLInputElement).value = \"\";\r\n    } else if (ev.key === \"Tab\") {\r\n      ev.preventDefault();\r\n\r\n      const content = (ev.target as HTMLInputElement).value;\r\n      if (content.length < 2) return;\r\n\r\n      const autoComplete = Object.keys(CommandConfig).filter((cmd) =>\r\n        cmd.startsWith(content)\r\n      )[0];\r\n      if (autoComplete === undefined) return;\r\n\r\n      (ev.target as HTMLInputElement).value = autoComplete;\r\n    } else if (ev.key === \"ArrowUp\") {\r\n      (ev.target as HTMLInputElement).value = CommandHistoryStore.goBackAndGetPrevious();\r\n    } else if (ev.key === \"ArrowDown\") {\r\n      (ev.target as HTMLInputElement).value = CommandHistoryStore.goForwardAndGetNext();\r\n    }\r\n  }\r\n\r\n  handleCommand(command: string): void {\r\n    const splits = command.split(\" \");\r\n    const actualCommand = splits.shift();\r\n\r\n    if (actualCommand === undefined) return;\r\n\r\n    const restArgs = splits.join(\" \");\r\n\r\n    const cmd = CommandConfig[actualCommand];\r\n\r\n    if (cmd === undefined || cmd === null) {\r\n      CurrentLinesStore.addLine(\r\n        new Line(`Could not find command \"${actualCommand}\".`, false, false)\r\n      );\r\n      return;\r\n    }\r\n\r\n    const func = cmd.action;\r\n    func(restArgs);\r\n  }\r\n\r\n  focus(): void {\r\n    this.input && this.input.focus();\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Line from \"./entities/Line\";\r\nimport { configure } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { CurrentLinesStore } from \"./stores\";\r\nimport PromptInput from \"./components/PromptInput\";\r\n\r\nconfigure({ enforceActions: \"observed\" });\r\n\r\nconst LineWithPrompt: React.FC<{\r\n  line: Line;\r\n  inputRef: (ref: PromptInput | null) => void;\r\n}> = ({ line, inputRef }) => {\r\n  console.log(\"Rendering LineWithPrompt\");\r\n  console.log(PromptInput);\r\n  console.log(\"Imported PromptInput above\");\r\n\r\n  return (\r\n    <div className={\"prompt-container\"}>\r\n      <p>{window.location.toString() + \">\" + line}</p>\r\n      {line.acceptsInput && <PromptInput ref={inputRef} />}\r\n    </div>\r\n  );\r\n};\r\n\r\n@observer\r\nexport default class App extends React.Component {\r\n  inputRef: PromptInput | null | undefined;\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.consoleClick = this.consoleClick.bind(this);\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    console.log(\"Rendering App!\");\r\n    return (\r\n      <div className=\"console\" onClick={this.consoleClick}>\r\n        {CurrentLinesStore.lines.map(this.lineToHtml)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //TODO: Get this to work without eating dragging\r\n  consoleClick(): void {\r\n    this.inputRef && this.inputRef.focus();\r\n  }\r\n\r\n  lineToHtml = (line: Line, index: number): React.ReactNode => {\r\n    console.log(\"lineToHtml: \" + line.toString() + \" index \" + index);\r\n\r\n    return line.hasPrompt ? (\r\n      <LineWithPrompt\r\n        key={index.toString()}\r\n        line={line}\r\n        inputRef={(ref): void => {\r\n          this.inputRef = ref;\r\n        }}\r\n      />\r\n    ) : (\r\n      <this.LineWithoutPrompt key={index.toString()} line={line} />\r\n    );\r\n  };\r\n\r\n  LineWithoutPrompt: React.FC<{ line: Line }> = ({ line }) => (\r\n    <p>{line.toString()}</p>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconsole.log(\"APP: \", App);\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}